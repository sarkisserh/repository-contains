const crypto = require('crypto');

class Block {
  constructor(index, previousHash, timestamp, data, nonce) {
    this.index = index;
    this.previousHash = previousHash;
    this.timestamp = timestamp;
    this.data = data;
    this.nonce = nonce;
    this.hash = this.calculateHash();
  }

  calculateHash() {
    return crypto
      .createHash('sha256')
      .update(
        this.index +
          this.previousHash +
          this.timestamp +
          JSON.stringify(this.data) +
          this.nonce
      )
      .digest('hex');
  }

  mineBlock(difficulty) {
    while (this.hash.substring(0, difficulty) !== '0'.repeat(difficulty)) {
      this.nonce++;
      this.hash = this.calculateHash();
    }
    console.log(`Block mined: ${this.hash}`);
  }
}

class Blockchain {
  constructor() {
    this.chain = [this.createGenesisBlock()];
    this.difficulty = 4;
  }

  createGenesisBlock() {
    return new Block(0, '0', new Date().toString(), 'Genesis Block', 0);
  }

  getLatestBlock() {
    return this.chain[this.chain.length - 1];
  }

  addBlock(newBlock) {
    newBlock.previousHash = this.getLatestBlock().hash;
    newBlock.mineBlock(this.difficulty);
    this.chain.push(newBlock);
  }

  isChainValid() {
    for (let i = 1; i < this.chain.length; i++) {
      const currentBlock = this.chain[i];
      const previousBlock = this.chain[i - 1];

      if (currentBlock.hash !== currentBlock.calculateHash()) {
        console.log(`Block ${i} hash is invalid.`);
        return false;
      }

      if (currentBlock.previousHash !== previousBlock.hash) {
        console.log(`Block ${i} previousHash is invalid.`);
        return false;
      }
    }
    return true;
  }
}

const myCoin = new Blockchain();

console.log('Mining block 1...');
myCoin.addBlock(new Block(1, '', new Date().toString(), { amount: 4 }));
console.log('Mining block 2...');
myCoin.addBlock(new Block(2, '', new Date().toString(), { amount: 10 }));

console.log('\nBlockchain is valid:', myCoin.isChainValid());
